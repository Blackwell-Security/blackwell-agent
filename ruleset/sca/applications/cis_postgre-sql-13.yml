# Security Configuration Assessment
# CIS Checks for PostgreSQL 13
# Copyright (C) 2015-2021, Wazuh Inc.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation
#
# Based on:
# Center for Internet Security Benchmark for PostgreSQL 13 Benchmark v1.0.0 - 02-26-2021

policy:
  id: "cis_postgresql_13"
  file: "cis_postgre-sql-13.yml"
  name: "CIS Benchmark for PostgreSQL 13"
  description: >
    "This document, CIS PostgreSQL 13 Benchmark, provides prescriptive guidance for
    establishing a secure configuration posture for PostgreSQL 13."
  references:
    - https://www.cisecurity.org/cis-benchmarks/

variables:
  $user: user # must be granted pg_read_all_settings
  $host: localhost
  $db: postgres
  $log_directory: some_dir
  $log_pattern: some_pattern
  $log_policy: some_log policy # 0600
  $log_rotation_age: some_log_rotation_age # 1d
  $log_rotation_size: some_log_rotation_size # 0
  $syslog_facility: some_syslog_facility # local0
  $syslog_ident: some_name # postgres
  $log_timezone: some_time_zone #  server's timezone in the Operating System

requirements: --TODO--

checks:
# 1 Installation and Patches
# 1.2 Ensure systemd Service Files Are Enabled (Automated)
  - id: 24000
    title: Ensure systemd Service Files Are Enabled
    description: Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.
    rationale: >
      Enabling the systemd service on the OS ensures the database service is active when a
      change of state occurs as in the case of a system startup or reboot.
    remediation: >
      Irrespective of package source, PostgreSQL services can be identified because it typically
      includes the text string "postgresql". PGDG installs do not automatically register the service
      as a "want" of the default systemd target. Multiple instances of PostgreSQL services often
      distinguish themselves using a version number.
    compliance:
      - cis: ["1.2"]
      - cis_csc: ["18", "5.1"]
    references:
      - https://linuxcommand.org/man_pages/runlevel8.html
      - https://linuxcommand.org/man_pages/chkconfig8.html
      - https://www.tldp.org/LDP/sag/html/run-levels-intro.html
    condition: all
    rules:
      - "c: systemctl get-default | systemctl list-dependencies $default_tmp | grep -i postgres -> r:\.+"

# 3 Logging Monitoring And Auditing
# 3.1.2 Ensure the log destinations are set correctly (Automated) --TODO--
  - id: 24002
    title: Ensure the log destinations are set correctly
    description: >
      PostgreSQL supports several methods for logging server messages, including stderr,
      csvlog and syslog. On Windows, eventlog is also supported. One or more of these
      destinations should be set for server log output.
    rationale: >
      If log_destination is not set, then any log messages generated by the core PostgreSQL
      processes will be lost.
    remediation: >
      "Execute the following SQL statements to remediate this setting (in this example, setting the
      log destination to csvlog):

      postgres=# alter system set log_destination = 'csvlog';

      ALTER SYSTEM

      postgres=# select pg_reload_conf();

      pg_reload_conf

      ----------------

      t

      (1 row)"

# 3.1.3 Ensure the logging collector is enabled (Automated)
  - id: 24003
    title: Ensure the logging collector is enabled
    description: >
      The logging collector is a background process that captures log messages sent to stderr
      and redirects them into log files. The logging_collector setting must be enabled in order
      for this process to run. It can only be set at server start.
    rationale: >
      "The logging collector approach is often more useful than logging to syslog, since some
      types of messages might not appear in syslog output. One common example is dynamiclinker failure message; another may be error messages produced by scripts such as
      archive_command.
      Note: This setting must be enabled when log_destination is either stderr or csvlog and
      for certain other logging parameters to take effect."
    remediation: >
      "Execute the following SQL statement(s) to remediate this setting:

      postgres=# alter system set logging_collector = 'on';

      ALTER SYSTEM

      26 | Page

      Unfortunately, this setting can only be changed at server (re)start. As root, restart the

      PostgreSQL service for this change to take effect:

      # whoami

      root

      # systemctl restart postgresql-13

      # systemctl status postgresql-13|grep 'ago$'

      Active: active (running) since <date>; 1s ago"
    compliance:
      - cis: ["3.1.3"]
      - cis_csc: ["6.2", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show logging_collector" -> r:^ on$'

# 3.1.4 Ensure the log file destination directory is set correctly (Automated)
  - id: 24004
    title: Ensure the log file destination directory is set correctly
    description: >
      The log_directory setting specifies the destination directory for log files when
      log_destination is stderr or csvlog. It can be specified as relative to the cluster data
      directory ($PGDATA) or as an absolute path. log_directory should be set according to your
      organization's logging policy.
    rationale: >
      If log_directory is not set, it is interpreted as the absolute path '/' and PostgreSQL will
      attempt to write its logs there (and typically fail due to a lack of permissions to that
      directory). This parameter should be set to direct the logs into the appropriate directory
      location as defined by your organization's logging policy.
    remediation: >
      "Execute the following SQL statement(s) to remediate this setting:

      postgres=# alter system set log_directory='/var/log/postgres';

      ALTER SYSTEM

      postgres=# select pg_reload_conf();

      pg_reload_conf

      ----------------

      28 | Page

      t

      (1 row)

      postgres=# show log_directory;

      log_directory

      ---------------

      /var/log/postgres

      (1 row)

      Note: The use of /var/log/postgres, above, is an example. This should be set to an
      appropriate path as defined by your organization's logging requirements. Having said that,
      it is a good idea to have the logs outside of your PGDATA directory so that they are not
      included by things like pg_basebackup or pgBackRest."
    compliance:
      - cis: ["3.1.4"]
      - cis_csc: ["6.2", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/runtime-config-logging.html
    conditions: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_directory" | grep $log_directory -> r:\.+'

# 3.1.5 Ensure the filename pattern for log files is set correctly (Automated)
  - id: 24005
    title: Ensure the filename pattern for log files is set correctly
    description: >
      The log_filename setting specifies the filename pattern for log files. The value for
      log_filename should match your organization's logging policy.
      The value is treated as a strftime pattern, so %-escapes can be used to specify timevarying filenames. The supported %-escapes are similar to those listed in the Open Group's
      strftime specification. If you specify a filename without escapes, you should plan to use a
      log rotation utility to avoid eventually filling the partition that contains log_directory. If
      there are any time-zone-dependent %-escapes, the computation is done in the zone
      specified by log_timezone. Also, the system's strftime is not used directly, so platformspecific (nonstandard) extensions do not work.
      If CSV-format output is enabled in log_destination, .csv will be appended to the log
      filename. (If log_filename ends in .log, the suffix is replaced instead.)
    rationale: >
      If log_filename is not set, then the value of log_directory is appended to an empty string
      try to write to a directory instead of a file.
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting:
      postgres=# alter system set log_filename='postgresql-%Y%m%d.log';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
      postgres=# show log_filename;
      log_filename
      -------------------
      postgresql-%Y%m%d.log
      (1 row)
      Note: In this example, a new logfile will be created for each day (e.g. postgresql20180901.log)"
    compliance:
      - cis: ["3.1.5"]
      - cis_csc: ["6.2", "6.3"]
    references:
      - https://man7.org/linux/man-pages/man3/strftime.3.html
      - https://www.postgresql.org/docs/current/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_filename" | grep $log_filename -> r:\.+'

# 3.1.6 Ensure the log file permissions are set correctly (Automated)
  - id: 24006
    title: Ensure the log file permissions are set correctly
    description: >
      The log_file_mode setting determines the file permissions for log files when
      logging_collector is enabled. The parameter value is expected to be a numeric mode
      specification in the form accepted by the chmod and umask system calls. (To use the
      customary octal format, the number must start with a 0 (zero).)
      The permissions should be set to allow only the necessary access to authorized personnel.
      In most cases the best setting is 0600, so that only the server owner can read or write the
      log files. The other commonly useful setting is 0640, allowing members of the owner's
      group to read the files, although to make use of that, you will need to alter the
      log_directory setting to store the log files outside the cluster data directory.
    rationale: >
      Log files often contain sensitive data. Allowing unnecessary access to log files may
      inadvertently expose sensitive data to unauthorized personnel.
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting (with the example assuming a desired value of 0600):
      postgres=# alter system set log_file_mode = '0600';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      33 | Page
      ----------------
      t
      (1 row)
      postgres=# show log_file_mode;
      log_file_mode
      ---------------
      0600
      (1 row)"
    compliance:
      - cis: ["3.1.6"]
      - cis_csc: ["14.4", "14.6"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_file_mode" | grep $log_file_mode -> r:\.+'

# 3.1.7 Ensure 'log_truncate_on_rotation' is enabled (Automated)
  - id: 24007
    title: Ensure 'log_truncate_on_rotation' is enabled
    description: >
      "Enabling the log_truncate_on_rotation setting when logging_collector is enabled
      causes PostgreSQL to truncate (overwrite) existing log files with the same name during log
      rotation instead of appending to them. For example, using this setting in combination with
      a log_filename setting value like postgresql-%H.log would result in generating 24 hourly
      log files and then cyclically overwriting them:

      postgresql-00.log

      postgresql-01.log

      [...]

      postgresql-23.log

      Note: Truncation will occur only when a new file is being opened due to time-based
      rotation, not during server startup or size-based rotation (see later in this benchmark for
      size-based rotation details)."
    rationale: >
      If this setting is disabled, pre-existing log files will be appended to if log_filename is
      configured in such a way that static names are generated.
      Enabling or disabling the truncation should only be decided when also considering the
      value of log_filename and log_rotation_age/log_rotation_size.
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting:
      postgres=# alter system set log_truncate_on_rotation = 'on';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
      postgres=# show log_truncate_on_rotation;
      log_truncate_on_rotation
      --------------------------
      on
      (1 row)"
    compliance:
      - cis: ["3.1.7"]
      - cis_csc: ["6.3", "6.4"]
    condition: all
    rules:
        - 'c:psql -U $user -h $host $db -c "show log_truncate_on_rotation" -> r:^ on$'

# 3.1.8 Ensure the maximum log file lifetime is set correctly (Automated)
  - id: 24008
    title: Ensure the maximum log file lifetime is set correctly
    description: >
      When logging_collector is enabled, the log_rotation_age parameter determines the
      maximum lifetime of an individual log file (depending on the value of log_filename). After
      this many minutes have elapsed, a new log file will be created via automatic log file
      rotation. Current best practices advise log rotation at least daily, but your organization's
      logging policy should dictate your rotation schedule.
    rationale: Log rotation is a standard best practice for log management.
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting (in this example, setting it
      to one hour):
      postgres=# alter system set log_rotation_age='1h';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)"
    compliance:
      - cis: ["3.1.8"]
      - cis_csc: ["6.3", "6.4"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_rotation_age" | grep $log_rotation_age -> r:\.+'

# 3.1.9 Ensure the maximum log file size is set correctly (Automated)
  - id: 24009
    title: Ensure the maximum log file size is set correctly
    description: >
      The log_rotation_size setting determines the maximum size of an individual log file.
      Once the maximum size is reached, automatic log file rotation will occur.
    rationale: >
      If this is set to zero, size-triggered creation of new log files is disabled. This will prevent
      automatic log file rotation when files become too large, which could put log data at
      increased risk of loss (unless age-based rotation is configured).
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting (in this example, setting it to 1GB):
      postgres=# alter system set log_rotation_size = '1GB';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)"
    compliance:
      - cis: ["3.1.9"]
      - cis_csc: ["6.3", "6.4"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_rotation_size" | grep $log_rotation_size -> r:\.+'

# 3.1.10 Ensure the correct syslog facility is selected (Manual)
  - id: 24010
    title: Ensure the correct syslog facility is selected
    description: >
      The syslog_facility setting specifies the syslog "facility" to be used when logging to
      syslog is enabled. You can choose from any of the 'local' facilities. Your organization's logging policy should dictate which facility to use based on the syslog
      daemon in use.
    rationale: >
      If not set to the appropriate facility, the PostgreSQL log messages may be intermingled with
      other applications' log messages, incorrectly routed, or potentially dropped (depending on
      your syslog configuration).
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting (in this example, setting it to the LOCAL1 facility):
      postgres=# alter system set syslog_facility = 'LOCAL1';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)"
    compliance:
      - cis: ["3.1.10"]
      - cis_csc: ["6", "6.2"]
    references:
      - https://tools.ietf.org/html/rfc3164#section-4.1.1
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show syslog_facility" | grep $syslog_facility -> r:\.+'

# 3.1.11 Ensure the program name for PostgreSQL syslog messages is correct (Automated)
  - id: 24011
    title: Ensure the program name for PostgreSQL syslog messages is correct
    description: >
      The syslog_ident setting specifies the program name used to identify PostgreSQL
      messages in syslog logs. An example of a possible program name is postgres.
    rationale: >
      If this is not set correctly, it may be difficult or impossible to distinguish PostgreSQL
      messages from other messages in syslog logs.
    remediation: |
      "Execute the following SQL statement(s) to remediate this setting (in this example, assuming a program name of proddb):
      postgres=# alter system set syslog_ident = 'proddb';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
      postgres=# show syslog_ident;
      syslog_ident
      --------------
      proddb
      (1 row)"
    compliance:
      - cis: ["3.1.11"]
      - cis_csc: ["6", "6.3"]
    references:
      - https://tools.ietf.org/html/rfc3164#section-4.1.3
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    conditions: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show syslog_ident" | grep $syslog_ident -> r:\.+'

# 3.1.12 Ensure the correct messages are written to the server log (Automated)
  - id: 24012
    title: Ensure the correct messages are written to the server log
    description: >
      The log_min_messages setting specifies the message levels that are written to the server
      log. Each level includes all the levels that follow it. The lower the level (vertically, below),
      the fewer messages are sent.
    rationale: >
      If this is not set to the correct value, too many messages or too few messages may be
      written to the server log.
    remediation: |
      Execute the following SQL statement(s) as superuser to remediate this setting (in this example, to set it to warning):
      postgres=# alter system set log_min_messages = 'warning';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.12"]
      - cis_csc: ["6","6.4"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: none
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_min_messages" -> r:^ ERROR$|^ LOG$|^ FATAL$|^ PANIC$'

# 3.1.13 Ensure the correct SQL statements generating errors are recorded (Automated)
  - id: 24013
    title: Ensure the correct SQL statements generating errors are recorded
    description: >
      The log_min_error_statement setting causes all SQL statements generating errors at or
      above the specified severity level to be recorded in the server log. Each level includes all
      the levels that follow it. The lower the level (vertically, below), the fewer messages are
      recorded.

      ERROR is considered the best practice setting. Changes should only be made in accordance
      with your organization's logging policy.

      Note: To effectively turn off logging of failing statements, set this parameter to PANIC.
    rationale: >
      If this is not set to the correct value, too many erring SQL statements or too few erring SQL
      statements may be written to the server log.
    remediation: |
      Execute the following SQL statement(s) as superuser to remediate this setting (in the example, to error):
      postgres=# alter system set log_min_error_statement = 'error';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.13"]
      - cis_csc: ["6", "6.4"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: none
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_min_error_statement" -> r:^ LOG$|^ FATAL$|^ PANIC$'

# 3.1.14 Ensure 'debug_print_parse' is disabled (Automated)
  - id: 24014
    title: Ensure 'debug_print_parse' is disabled
    description: >
      The debug_print_parse setting enables printing the resulting parse tree for each executed
      query. These messages are emitted at the LOG message level. Unless directed otherwise by
      your organization's logging policy, it is recommended this setting be disabled by setting it
      to off.
    rationale: >
      Enabling any of the DEBUG printing variables may cause the logging of sensitive information
      that would otherwise be omitted based on the configuration of the other logging settings.
    remediation: |
      Execute the following SQL statement(s) to remediate this setting:
      postgres=# alter system set debug_print_parse='off';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.14"]
      - cis_csc: ["6", "5.1"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    conditions: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show debug_print_parse" -> r:^ off$'

# 3.1.15 Ensure 'debug_print_rewritten' is disabled (Automated)
  - id: 24015
    title: Ensure 'debug_print_rewritten' is disabled
    description: >
      The debug_print_rewritten setting enables printing the query rewriter output for each
      executed query. These messages are emitted at the LOG message level. Unless directed
      otherwise by your organization's logging policy, it is recommended this setting be disabled
      by setting it to off.
    rationale: >
      Enabling any of the DEBUG printing variables may cause the logging of sensitive information
      that would otherwise be omitted based on the configuration of the other logging settings.
    remediation: |
      Execute the following SQL statement(s) to disable this setting:
      postgres=# alter system set debug_print_rewritten = 'off';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.15"]
      - cis_csc: ["6", "5.1"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html+
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show debug_print_rewritten" -> r:^ off$'

# 3.1.16 Ensure 'debug_print_plan' is disabled (Automated)
  - id: 24016
    title: Ensure 'debug_print_plan' is disabled
    description: >
      The debug_print_plan setting enables printing the execution plan for each executed query.
      These messages are emitted at the LOG message level. Unless directed otherwise by your
      organization's logging policy, it is recommended this setting be disabled by setting it to off.
    rationale: >
      Enabling any of the DEBUG printing variables may cause the logging of sensitive information
      that would otherwise be omitted based on the configuration of the other logging settings.
    remediation: |
      Execute the following SQL statement(s) to disable this setting:
      postgres=# alter system set debug_print_plan = 'off';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.16"]
      - cis_csc: ["6", "5.1"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show debug_print_plan" -> r:^ off$'

# 3.1.17 Ensure 'debug_pretty_print' is enabled (Automated)
  - id: 24017
    title: Ensure 'debug_pretty_print' is enabled
    description: >
      Enabling debug_pretty_print indents the messages produced by debug_print_parse,
      debug_print_rewritten, or debug_print_plan making them significantly easier to read.
    rationale: >
      If this setting is disabled, the "compact" format is used instead, significantly reducing
      readability of the DEBUG statement log messages.
    remediation: |
      Execute the following SQL statement(s) to enable this setting:
      postgres=# alter system set debug_pretty_print = 'on';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.17"]
      - cis_csc: ["6", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show debug_pretty_print" -> r:^ on$'

# 3.1.18 Ensure 'log_connections' is enabled (Automated)
  - id: 24018
    title: Ensure 'log_connections' is enabled
    description: >
      Enabling the log_connections setting causes each attempted connection to the server to
      be logged, as well as successful completion of client authentication. This parameter cannot
      be changed after session start.
    rationale: >
      PostgreSQL does not maintain an internal record of attempted connections to the database
      for later auditing. It is only by enabling the logging of these attempts that one can
      determine if unexpected attempts are being made.

      Note that enabling this without also enabling log_disconnections provides little value.
      Generally, you would enable/disable the pair together.
    remediation: |
      Execute the following SQL statement(s) to enable this setting:
      postgres=# alter system set log_connections = 'on';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.18"]
      - cis_csc: ["6", "6.3"]
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_connections" -> r:^ on$'

# 3.1.19 Ensure 'log_disconnections' is enabled (Automated)
  - id: 24019
    description: >
      Enabling the log_disconnections setting logs the end of each session, including session
      duration. This parameter cannot be changed after session start.
    rationale: >
      PostgreSQL does not maintain the beginning or ending of a connection internally for later
      review. It is only by enabling the logging of these that one can examine connections for
      failed attempts, 'over long' duration, or other anomalies.

      Note that enabling this without also enabling log_connections provides little value.
      Generally, you would enable/disable the pair together
    remediation: |
      Execute the following SQL statement(s) to enable this setting:
      postgres=# alter system set log_disconnections = 'on';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.19"]
      - cis_csc: ["6", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_disconnections" -> r:^ on$'

# 3.1.20 Ensure 'log_error_verbosity' is set correctly (Automated)
  - id: 24020
    title: Ensure 'log_error_verbosity' is set correctly
    description: >
      The log_error_verbosity setting specifies the verbosity (amount of detail) of logged
      messages.
    rationale: >
      If this is not set to the correct value, too many details or too few details may be logged.
    remediation: |
      Execute the following SQL statement(s) as superuser to remediate this setting (in this example, to verbose):
      postgres=# alter system set log_error_verbosity = 'verbose';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.20"]
      - cis: ["6", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_error_verbosity" -> r:^ verbose$'

# 3.1.21 Ensure 'log_hostname' is set correctly (Automated)
  - id: 24021
    title: Ensure 'log_hostname' is set correctly
    description: >
      Enabling the log_hostname setting causes the hostname of the connecting host to be logged
      in addition to the host's IP address for connection log messages. Disabling the setting
      causes only the connecting host's IP address to be logged, and not the hostname. Unless
      your organization's logging policy requires hostname logging, it is best to disable this
      setting so as not to incur the overhead of DNS resolution for each statement that is logged.
    rationale: >
      Depending on your hostname resolution setup, enabling this setting might impose a nonnegligible performance penalty. Additionally, the IP addresses that are logged can be
      resolved to their DNS names when reviewing the logs (unless dynamic host names are
      being used as part of your DHCP setup).
    remediation: |
      Execute the following SQL statement(s) to remediate this setting (in this example, to off):
      postgres=# alter system set log_hostname='off';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.21"]
      - cis: ["6", "5.1"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_hostname" -> r:^ off$'

# 3.1.22 Ensure 'log_line_prefix' is set correctly (Automated)
  - id: 24022
    title: Ensure 'log_line_prefix' is set correctly
    description: >
      The log_line_prefix setting specifies a printf-style string that is prefixed to each log line.
      If blank, no prefix is used. You should configure this as recommended by the pgBadger
      development team unless directed otherwise by your organization's logging policy.

      % characters begin "escape sequences" that are replaced with status information as
      outlined below. Unrecognized escapes are ignored. Other characters are copied straight to
      the log line. Some escapes are only recognized by session processes and will be treated as
      empty by background processes such as the main server process. Status information may
      be aligned either left or right by specifying a numeric literal after the % and before the
      option. A negative value will cause the status information to be padded on the right with
      spaces to give it a minimum width, whereas a positive value will pad on the left. Padding
      can be useful to aid human readability in log files.
    rationale: >
      Properly setting log_line_prefix allows for adding additional information to each log
      entry (such as the user, or the database). Said information may then be of use in auditing or
      security reviews.
    remediation: |
      Execute the following SQL statement(s) to remediate this setting:
      postgres=# alter system set log_line_prefix = '%m [%p]: [%l-1]
      db=%d,user=%u,app=%a,client=%h';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.22"]
      - cis: ["6", "6.3"]
    references:
      - https://pgbadger.darold.net/
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_disconnections" -> r:%m [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h'

# 3.1.23 Ensure 'log_statement' is set correctly (Automated)
  - id: 24023
    title: Ensure 'log_statement' is set correctly
    description: >
      The log_statement setting specifies the types of SQL statements that are logged.
      It is recommended this be set to ddl unless otherwise directed by your organization's
      logging policy.
    rationale: >
      Setting log_statement to align with your organization's security and logging policies
      facilitates later auditing and review of database activities.
    remediation: |
      Execute the following SQL statement(s) as superuser to remediate this setting:
      postgres=# alter system set log_statement='ddl';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      t
      (1 row)
    compliance:
      - cis: ["3.1.23"]
      - cis: ["6", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
    condition: none
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_statement" -> r:^ none$'

# 3.1.24 Ensure 'log_timezone' is set correctly (Automated)
  - id: 24024
    title: Ensure 'log_timezone' is set correctly
    description: >
      The log_timezone setting specifies the time zone to use in timestamps within log messages.
      This value is cluster-wide, so that all sessions will report timestamps consistently. Unless
      directed otherwise by your organization's logging policy, set this to either GMT or UTC.
    rationale: >
      Log entry timestamps should be configured for an appropriate time zone as defined by
      your organization's logging policy to ensure a lack of confusion around when a logged
      event occurred.

      Note that this setting affects only the timestamps present in the logs. It does not affect the
      time zone in use by the database itself (for example, select now()), nor does it affect the
      host's time zone.
    remediation: |
      Execute the following SQL statement(s) to remediate this setting:
      postgres=# alter system set log_timezone = 'GMT';
      ALTER SYSTEM
      postgres=# select pg_reload_conf();
      pg_reload_conf
      ----------------
      72 | Page
      t
      (1 row)
    compliance:
      - cis: ["3.1.24"]
      - cis: ["6", "6.3"]
    references:
      - https://www.postgresql.org/docs/current/static/runtime-config-logging.html
      - https://en.wikipedia.org/wiki/Time_zone
    condition: any
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_timezone" -> r:^ GMT$'
      - 'c:psql -U $user -h $host $db -c "show log_timezone" -> r:^ UTC$'
      - 'c:psql -U $user -h $host $db -c "show log_timezone" | grep $log_timezone -> r:\.+'

# 3.2 Ensure the PostgreSQL Audit Extension (pgAudit) is enabled (Automated)
  - id: 24025
    title: Ensure the PostgreSQL Audit Extension (pgAudit) is enabled
    description: >
      The PostgreSQL Audit Extension (pgAudit) provides detailed session and/or object audit
      logging via the standard PostgreSQL logging facility. The goal of pgAudit is to provide
      PostgreSQL users with the capability to produce audit logs often required to comply with
      government, financial, or ISO certifications.
    rationale: >
      Basic statement logging can be provided by the standard logging facility with
      log_statement = all. This is acceptable for monitoring and other uses but does not
      provide the level of detail generally required for an audit. It is not enough to have a list of
      all the operations performed against the database, it must also be possible to find
      particular statements that are of interest to an auditor. The standard logging facility shows
      what the user requested, while pgAudit focuses on the details of what happened while the
      database was satisfying the request.

      When logging SELECT and DML statements, pgAudit can be configured to log a separate entry
      for each relation referenced in a statement. No parsing is required to find all statements
      that touch a particular table. In fact, the goal is that the statement text is provided primarily
      for deep forensics and should not be required for an audit.
    remediation: |
      To install and enable pgAudit, simply install the appropriate rpm from the PGDG repo:
      # whoami
      root
      pgauditlogtofile_96.x86_64 : PostgreSQL Audit Log To File Extension
      [root@centos8 ~]# dnf -y install pgaudit15_13
      Last metadata expiration check: 0:24:09 ago on Mon 14 Dec 2020 06:59:52 PM
      UTC.
      Dependencies resolved.
      =============================================================================
      Package Architecture Version Repository Size
      =============================================================================
      Installing:
      pgaudit15_13 x86_64 1.5.0-1.rhel8 pgdg13 52 k
      Transaction Summary
      =============================================================================
      Install 1 Package
      Total download size: 52 k
      Installed size: 93 k
      Downloading Packages:
      pgaudit15_13-1.5.0-1.rhel8.x86_64.rpm 54 kB/s | 52 kB 00:00
      -----------------------------------------------------------------------------
      Total 54 kB/s | 52 kB 00:00
      75 | Page
      Running transaction check
      Transaction check succeeded.
      Running transaction test
      Transaction test succeeded.
      Running transaction
      Preparing : 1/1
      Installing : pgaudit15_13-1.5.0-1.rhel8.x86_64 1/1
      Running scriptlet: pgaudit15_13-1.5.0-1.rhel8.x86_64 1/1
      Verifying : pgaudit15_13-1.5.0-1.rhel8.x86_64 1/1
      Installed:
      pgaudit15_13-1.5.0-1.rhel8.x86_64
      Complete!
      pgAudit is now installed and ready to be configured. Next, we need to alter the postgresql.conf configuration file to:
      • enable pgAudit as an extension in the shared_preload_libraries parameter
      • indicate which classes of statements we want to log via the pgaudit.log parameter
      and, finally, restart the PostgreSQL service:
      $ vi ${PGDATA}/postgresql.conf
      Find the shared_preload_libraries entry, and add 'pgaudit' to it (preserving any existing entries):
      shared_preload_libraries = 'pgaudit'
      OR
      shared_preload_libraries = 'pgaudit,somethingelse'
      Now, add a new pgaudit-specific entry:
      # for this example we are logging the ddl and write operations
      pgaudit.log='ddl,write'
      Restart the PostgreSQL server for changes to take affect:
      # whoami
      root
      # systemctl restart postgresql-13
      # systemctl status postgresql-13|grep 'ago$'
      Active: active (running) since [date] 10s ago
    compliance:
      - cis: ["3.2"]
      - cis: ["6", "6.2"]
    references:
      - https://www.pgaudit.org/
    condition: all
    rules:
      - 'c:psql -U $user -h $host $db -c "show shared_preload_libraries" -> r:pgaudit'

# 4 User Access and Authorization
#
  - id: 2402
    title:
    description: >

    rationale: >

    remediation: |

    compliance:
      - cis: ["3."]
      - cis: ["6", "6."]
    references:
      -
    condition: any
    rules:
      - 'c:psql -U $user -h $host $db -c "show log_timezone" -> r:^ GMT$'
