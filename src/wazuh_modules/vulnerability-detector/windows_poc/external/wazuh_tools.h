#ifndef W_TOOLS
#define W_TOOLS
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/un.h>
#include <sys/stat.h>
#include <unistd.h>
#include <netdb.h>
#include <ctype.h>
#include "sqlite/sqlite3.h"
#include "cJSON/cJSON.h"
#include "os_net/os_net.h"
#include "fcntl.h"

#define os_strdup(x,y) ((y = strdup(x)))?(void)1:exit(1)
#define os_calloc(x,y,z) ((z = (__typeof__(z)) calloc(x,y)))?(void)1:exit(1)
#define os_realloc(x,y,z) ((z = (__typeof__(z))realloc(x,y)))?(void)1:exit(1)
#define os_malloc(x,y) ((y = (__typeof__(y)) malloc(x)))?(void)1:exit(1)
#define os_free(x) free(x); x = NULL;
#define str_lowercase(str_lc) { char *x = str_lc; while (*x != '\0') { *x = tolower(*x); x++; } }
#define OS_INVALID 1
#define OS_SOCKTERR -6
#define OS_CONNERR -8
#define OS_SOCKBUSY -11
#define OS_MAXLEN -12
#define OS_MAXSTR 66666
#define BACKLOG 128
#define WM_VULNDETECTOR_LOGTAG "vuln-det"
#define OS_SIZE_6144 6144
#define OS_SIZE_1024 1024
#define OS_SIZE_128 128
#define VU_MAX_PACK_REQ 40
#define MAX_DYN_STR 4194304
#define DEFAULTDIR "/var/ossec"
#define WDB_LOCAL_SOCK "/queue/db/wdb"
#define WDB_LOCAL_SOCK_PATH DEFAULTDIR WDB_LOCAL_SOCK
#define JSON_MAX_FSIZE 67108864
#define WM_DOWNLOAD_SOCK "/queue/ossec/download"
#define WM_DOWNLOAD_SOCK_PATH DEFAULTDIR WM_DOWNLOAD_SOCK
#define OS_FILERR       -3  /* Error in the file        */

typedef enum vu_query {
    VU_SOFTWARE_REQUEST,
    VU_SOFTWARE_FULL_REQ,
    VU_INSERT_CPE,
    BEGIN_T,
    END_T,
    VU_REMOVE_CPE,
    VU_REMOVE_AGENT_CPE,
    VU_REMOVE_SQUENCE,
    VU_REMOVE_AGENTS_TABLE,
    VU_INSERT_AGENTS,
    VU_SEARCH_AGENT_CPE,
    VU_GET_AGENT_CPES,
    VU_SYSC_UPDATE_SCAN,
    VU_SYSC_UPDATE_CPE,
    VU_SYSC_SCAN_REQUEST,
    VU_GET_PACK_WITHOUT_CPE,
    VU_MIN_CPEINDEX,
    VU_UPDATE_AGENT_CPE
} vu_query;

typedef struct cpe {
    int id;
    char *part;
    char * vendor;
    char * product;
    char * version;
    char * update;
    char * edition;
    char * language;
    char * sw_edition;
    char * target_sw;
    char * target_hw;
    char * other;
} cpe;

typedef struct cpe_node {
    cpe * node;
    struct cpe_node * next;
    struct cpe_node * prev;
} cpe_node;

typedef struct cpe_list {
    cpe_node * first;
    cpe_node * last;
} cpe_list;

static const char *vu_queries[] = {
    "agent %s sql SELECT DISTINCT NAME, VERSION, ARCHITECTURE, VENDOR FROM SYS_PROGRAMS WHERE TRIAGED = 0 AND SCAN_ID = '%s' LIMIT %i OFFSET %i;", // ~~~~~~~~~~~ Change on vuln
    "agent %s sql SELECT DISTINCT NAME, VERSION, ARCHITECTURE, VENDOR FROM SYS_PROGRAMS WHERE SCAN_ID = '%s' LIMIT %i OFFSET %i;", // ~~~~~~~~~~~ Change on vuln
    "INSERT INTO CPE_INDEX VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    "BEGIN;",
    "END;",
    "DELETE FROM CPE_INDEX;",
    "DELETE FROM CPE_INDEX WHERE ID < 0;",
    "DELETE FROM SQLITE_SEQUENCE WHERE NAME = ?;",
    "DELETE FROM AGENTS;",
    "INSERT INTO AGENTS VALUES(?,0,?,?,?,?);", // ~~~~~~~~~~~ Change on vuln
    "SELECT DISTINCT PART FROM CPE_INDEX WHERE PART = 'a' AND VENDOR = ? AND PRODUCT = ?;",
    "SELECT PART, CPE_INDEX.VENDOR, PRODUCT, CPE_INDEX.VERSION, UPDATEV, EDITION, LANGUAGE, SW_EDITION, TARGET_SW, TARGET_HW, OTHER, AGENTS.VENDOR, PACKAGE_NAME, AGENTS.VERSION, ARCH FROM AGENTS JOIN CPE_INDEX ON CPE_INDEX_ID = ID WHERE AGENT_ID = ?;",
    "agent %s sql UPDATE SYS_PROGRAMS SET TRIAGED = 1 WHERE SCAN_ID = '%s';",
    "agent %s sql UPDATE SYS_PROGRAMS SET CPE = '%s:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s' WHERE VENDOR = '%s' AND NAME = '%s' AND VERSION = '%s' AND ARCHITECTURE = '%s';",
    "agent %s sql SELECT SCAN_ID FROM SYS_PROGRAMS WHERE SCAN_TIME = (SELECT SCAN_TIME FROM SYS_PROGRAMS S1 WHERE NOT EXISTS (SELECT SCAN_TIME FROM SYS_PROGRAMS S2 WHERE S2.SCAN_TIME > S1.SCAN_TIME)) LIMIT 1;",
    "SELECT VENDOR, PACKAGE_NAME, VERSION, ARCH FROM AGENTS WHERE AGENT_ID = ? AND CPE_INDEX_ID != -1;",
    "SELECT MIN(ID) FROM CPE_INDEX;",
    "UPDATE AGENTS SET CPE_INDEX_ID = ? WHERE AGENT_ID = ? AND VENDOR = ? AND PACKAGE_NAME = ? AND VERSION = ? AND ARCH = ?;"
};

typedef struct last_scan {
    char *last_scan_id;
    time_t last_scan_time;
} last_scan;

typedef struct agent_software {
    char *agent_id;
    char *agent_name;
    char *agent_ip;
    char *agent_OS;
    char *arch;
    char info;
    struct agent_software *next;
    struct agent_software *prev;
} agent_software;

char * wstr_chr(char * str, int character);
char *os_strip_char(const char *source, char remove);
int wm_vuldet_sql_error(sqlite3 *db, sqlite3_stmt *stmt);
int wm_vuldet_create_file(const char *path, const char *source);
int wm_vuldet_step(sqlite3_stmt *stmt);
int wm_vuldet_get_software_info(agent_software *agent, sqlite3 *db, int agents_triag, unsigned long ignore_time);
cJSON * json_fread(const char * path, char retry);
void json_strip(char * json);
long get_fp_size(FILE * fp);
int wurl_request(const char * url, const char * dest);
char * wstr_replace(const char * string, const char * search, const char * replace);
cpe *decode_cpe(char *raw_cpe);
void free_cpe(cpe *node);
int add_cpe(char *buffer, cpe_list *node_list, int index);
int insert_cpe_db(cpe_list *node_list, char overwrite);

#endif
