/*
 * Vulnerability detector: Debian EVR version matching functions
 * Piece of code extracted from Debian source code
 * Copyright (C) 2015-2020, Wazuh Inc.
 * February 20th, 2020.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef CLIENT

#ifndef WM_VULNDETECTOR_EVR
#define WM_VULNDETECTOR_EVR

#define DPKG_BIT(n) (1UL << (n))
#define C_CTYPE_BIT(bit)	(1 << (bit))

enum c_ctype_bit {
	C_CTYPE_BLANK = C_CTYPE_BIT(0),
	C_CTYPE_WHITE = C_CTYPE_BIT(1),
	C_CTYPE_SPACE = C_CTYPE_BIT(2),
	C_CTYPE_UPPER = C_CTYPE_BIT(3),
	C_CTYPE_LOWER = C_CTYPE_BIT(4),
	C_CTYPE_DIGIT = C_CTYPE_BIT(5),

	C_CTYPE_ALPHA = C_CTYPE_UPPER | C_CTYPE_LOWER,
	C_CTYPE_ALNUM = C_CTYPE_ALPHA | C_CTYPE_DIGIT,
};

/**
 * Enum constants for the supported relation operations that can be done
 * on Debian versions.
 */
enum dpkg_relation {
	/** The “none” relation, sentinel value. */
	DPKG_RELATION_NONE	= 0,
	/** Equality relation (‘=’). */
	DPKG_RELATION_EQ	= DPKG_BIT(0),
	/** Less than relation (‘<<’). */
	DPKG_RELATION_LT	= DPKG_BIT(1),
	/** Less than or equal to relation (‘<=’). */
	DPKG_RELATION_LE	= DPKG_RELATION_LT | DPKG_RELATION_EQ,
	/** Greater than relation (‘>>’). */
	DPKG_RELATION_GT	= DPKG_BIT(2),
	/** Greater than or equal to relation (‘>=’). */
	DPKG_RELATION_GE	= DPKG_RELATION_GT | DPKG_RELATION_EQ,
};

/**
 * Data structure representing a Debian version.
 *
 * @see deb-version(5)
 */
struct dpkg_version {
	/** The epoch. It will be zero if no epoch is present. */
	unsigned int epoch;
	/** The upstream part of the version. */
	const char *version;
	/** The Debian revision part of the version. */
	const char *revision;
};



int dpkg_version_compare(const struct dpkg_version *a, const struct dpkg_version *b);
bool dpkg_version_relate(const struct dpkg_version *a, enum dpkg_relation rel, const struct dpkg_version *b);
bool c_isbits(int c, enum c_ctype_bit bits);
bool c_isdigit(int c);
bool c_isalpha(int c);

#endif
#endif
