/*
 * Copyright (C) 2015-2020, Wazuh Inc.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <cmocka.h>
#include <stdio.h>

#include "../../wazuh_modules/wmodules.h"
#include "../../headers/shared.h"

/* redefinitons/wrapping */

char *__wrap_strerror (int __errnum);

void __wrap__merror(const char * file, int line, const char * func, const char *msg, ...);

void __wrap__mterror(const char *tag, const char * file, int line, const char * func, const char *msg, ...);

void __wrap__mterror_exit(const char *tag, const char * file, int line, const char * func, const char *msg, ...);

void __wrap__mtdebug1(const char *tag, const char * file, int line, const char * func, const char *msg, ...);

void __wrap__mtdebug2(const char *tag, const char * file, int line, const char * func, const char *msg, ...);

int __wrap_OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings);

int __real_OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings);

int __wrap_OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);

int __real_OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);

int __wrap_StartMQ(const char *key, short int type);

int __real_StartMQ(const char *key, short int type);

int __wrap_SendMSG(int queue, const char *message, const char *locmsg, char loc);

int __real_SendMSG(int queue, const char *message, const char *locmsg, char loc);

int __wrap_OS_ConnectUnixDomain(const char *path, int type, int max_msg_size);

int __wrap_OS_SendSecureTCP(int sock, uint32_t size, const void * msg);

int __wrap_OS_RecvSecureTCP(int sock, char * ret, uint32_t size);

int __wrap_close();

int __wrap_sqlite3_prepare_v2();

int __wrap_wm_vuldet_prepare();

int __wrap_sqlite3_bind_text(sqlite3_stmt* pStmt, int a, const char* b, int c, void *d);

int __wrap_sqlite3_bind_int(sqlite3_stmt* pStmt, int a, int b);

int __wrap_sqlite3_step();

int __wrap_sqlite3_column_int(sqlite3_stmt *pStmt, int i);

double __wrap_sqlite3_column_double(sqlite3_stmt *pStmt, int i);

const unsigned char *__wrap_sqlite3_column_text(sqlite3_stmt *pStmt, int i);

const unsigned char *__real_sqlite3_column_text(sqlite3_stmt *pStmt, int i);

int __wrap_sqlite3_close_v2();

int __wrap_sqlite3_finalize();

int __wrap_wdb_finalize();

const char *__wrap_sqlite3_errmsg();

CJSON_PUBLIC(cJSON *) __wrap_cJSON_CreateObject(void);

CJSON_PUBLIC(cJSON *) __real_cJSON_CreateObject(void);

CJSON_PUBLIC(cJSON *) __wrap_cJSON_CreateArray(void);

CJSON_PUBLIC(cJSON *) __real_cJSON_CreateArray(void);

OSHashNode *__wrap_OSHash_Begin(const OSHash *self, unsigned int *i);

OSHashNode *__real_OSHash_Begin(const OSHash *self, unsigned int *i);