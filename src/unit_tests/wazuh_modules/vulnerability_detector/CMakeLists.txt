# Generate vulnerability detector library
file(GLOB vulndetector_files
    ${SRC_FOLDER}/wazuh_modules/*.o
    ${SRC_FOLDER}/wazuh_modules/vulnerability_detector/*.o)
list(REMOVE_ITEM vulndetector_files ${SRC_FOLDER}/wazuh_modules/main.o)

add_library(VULNDETECTOR_O STATIC ${vulndetector_files})

set_source_files_properties(
    ${vulndetector_files}
    PROPERTIES
    EXTERNAL_OBJECT true
    GENERATED true
)

set_target_properties(
    VULNDETECTOR_O
    PROPERTIES
    LINKER_LANGUAGE C
)

target_link_libraries(VULNDETECTOR_O ${WAZUHLIB} ${WAZUHEXT} -lpthread)

# Generate vulnerability detector tests
list(APPEND vulndetector_names "test_wm_vuln_detector")
list(APPEND vulndetector_flags "-Wl,--wrap,_merror -Wl,--wrap,_mterror -Wl,--wrap,_mtdebug1 -Wl,--wrap,_mtdebug2 -Wl,--wrap,OS_ConnectUnixDomain \
                                -Wl,--wrap,OS_SendSecureTCP -Wl,--wrap,OS_RecvSecureTCP -Wl,--wrap,close -Wl,--wrap,sqlite3_prepare_v2 \
                                -Wl,--wrap,sqlite3_bind_text -Wl,--wrap,sqlite3_bind_int -Wl,--wrap,sqlite3_step -Wl,--wrap,sqlite3_close_v2 \
                                -Wl,--wrap,sqlite3_finalize -Wl,--wrap,sqlite3_errmsg -Wl,--wrap,cJSON_CreateObject -Wl,--wrap,cJSON_CreateArray \
                                -Wl,--wrap,OPENSSL_init_ssl -Wl,--wrap,OPENSSL_init_crypto -Wl,--wrap,StartMQ -Wl,--wrap,SendMSG -Wl,--wrap,strerror \
                                -Wl,--wrap,_mterror_exit -Wl,--wrap,OSHash_Begin -Wl,--wrap,sqlite3_column_text -Wl,--wrap,sqlite3_column_double \
                                -Wl,--wrap,cJSON_Delete -Wl,--wrap,cJSON_AddItemToObject -Wl,--wrap,cJSON_AddStringToObject -Wl,--wrap,cJSON_CreateNumber \
                                -Wl,--wrap,cJSON_CreateString -Wl,--wrap,cJSON_AddItemToArray -Wl,--wrap,cJSON_PrintUnformatted -Wl,--wrap,OSHash_Next")

list(APPEND vulndetector_names "test_wm_vuln_detector_evr")
list(APPEND vulndetector_flags "-Wl,--wrap,_merror -Wl,--wrap,_mterror -Wl,--wrap,_mtdebug1 -Wl,--wrap,_mtdebug2 -Wl,--wrap,OS_ConnectUnixDomain \
                                -Wl,--wrap,OS_SendSecureTCP -Wl,--wrap,OS_RecvSecureTCP -Wl,--wrap,close -Wl,--wrap,sqlite3_prepare_v2 \
                                -Wl,--wrap,sqlite3_bind_text -Wl,--wrap,sqlite3_bind_int -Wl,--wrap,sqlite3_step -Wl,--wrap,sqlite3_close_v2 \
                                -Wl,--wrap,sqlite3_finalize -Wl,--wrap,sqlite3_errmsg -Wl,--wrap,cJSON_CreateObject -Wl,--wrap,cJSON_CreateArray \
                                -Wl,--wrap,OPENSSL_init_ssl -Wl,--wrap,OPENSSL_init_crypto -Wl,--wrap,StartMQ -Wl,--wrap,SendMSG -Wl,--wrap,strerror \
                                -Wl,--wrap,_mterror_exit")

list(APPEND vulndetector_names "test_wm_vuln_detector_nvd")
list(APPEND vulndetector_flags "-Wl,--wrap,_merror -Wl,--wrap,_mterror -Wl,--wrap,_mtdebug1 -Wl,--wrap,_mtdebug2 -Wl,--wrap,close -Wl,--wrap,sqlite3_prepare_v2 \
                                -Wl,--wrap,sqlite3_bind_text -Wl,--wrap,sqlite3_bind_int -Wl,--wrap,sqlite3_step -Wl,--wrap,sqlite3_close_v2 \
                                -Wl,--wrap,sqlite3_finalize -Wl,--wrap,sqlite3_errmsg -Wl,--wrap,strerror -Wl,--wrap,_mterror_exit -Wl,--wrap,sqlite3_column_int \
                                -Wl,--wrap,wm_checks_package_vulnerability")

# Compilig tests
list(LENGTH vulndetector_names count)
math(EXPR count "${count} - 1")
foreach(counter RANGE ${count})
    list(GET vulndetector_names ${counter} test_name)
    list(GET vulndetector_flags ${counter} test_flags)

    add_executable(${test_name} ${test_name}.c mocks_wm_vuln_detector.c)

    target_link_libraries(
        ${test_name}
        ${WAZUHLIB}
        ${WAZUHEXT}
        VULNDETECTOR_O
        ${TEST_DEPS}
    )

    if(NOT test_flags STREQUAL " ")
        target_link_libraries(
            ${test_name}
            ${test_flags}
        )
    endif()
    add_test(NAME ${test_name} COMMAND ${test_name})
endforeach()
