@startuml packages

actor "send-queue" as queue
participant syscollector as sysco
participant sysinfo
participant dbsync
participant rsync

activate dbsync
activate rsync
activate sysco
activate sysinfo
== Scan ==
sysco -> sysco ++: scan()
sysco -> sysco ++: scanPackages()
alt packages  enabled
    sysco -> sysco: log("Starting packages scan")
    sysco -> sysco ++: getPackagesData()
    sysco -> sysinfo : packages()
    sysco <- sysinfo : packagesData
    alt packagesData not null
        sysco -> normalizer : normalize(packagesData)
        sysco <- normalizer : normalizedPackagesData
        loop item in normalizedPackagesData
            sysco -> sysco : checksum = getItemChecksum(item)
            alt has hotfix?
                sysco -> sysco : hotfixesList.push_back(item)
            else
                sysco -> sysco : itemId = getItemId() 
                sysco -> sysco : isElementDuplicated(itemId)
                alt not duplicated
                    sysco -> sysco : packagesList.push_back(item)  
                end
            end
        end
    end

    sysco -> sysco : ret[HOTFIXES_TABLE] = hotfixesList;
    sysco -> sysco : ret[PACKAGES_TABLE] = packagesList;

    return ret as packagesData

    alt packagesData not null
        alt packagesData contains packages
            sysco -> sysco ++: updateAndNotifyChanges(PACKAGES_TABLE)
                sysco -> dbsync : createTxn()
                sysco <-- dbsync : txn
                sysco -> dbsync++ : txn.syncTxnRow()
                    alt new
                        dbsync -> sysco : notify(Inserted)
                    else modified
                        dbsync -> sysco : notify(Modified)
                    end
                    sysco ->x queue : sendDiff()
                    dbsync <-- sysco
                    dbsync --> sysco
                dbsync--
                sysco -> dbsync++ : txn.getDeletedRows()
                    dbsync -> sysco : notify(Deleted)
                    sysco ->x queue : sendDiff()
                    dbsync <-- sysco
                    dbsync --> sysco
                dbsync--
                sysco--
        end
        opt hotfix enabled
            alt packagesData contains hotfixes
                sysco -> sysco ++: updateAndNotifyChanges(PACKAGES_TABLE)
                    sysco -> dbsync : createTxn()
                    sysco <-- dbsync : txn
                    sysco -> dbsync++ : txn.syncTxnRow()
                        alt new
                            dbsync -> sysco : notify(Inserted)
                        else modified
                            dbsync -> sysco : notify(Modified)
                        end
                        sysco ->x queue : sendDiff()
                        dbsync <-- sysco
                        dbsync --> sysco
                    dbsync--
                    sysco -> dbsync++ : txn.getDeletedRows()
                        dbsync -> sysco : notify(Deleted)
                        sysco ->x queue : sendDiff()
                        dbsync <-- sysco
                        dbsync --> sysco
                    dbsync--
                    sysco--
            end
        end
    end
    sysco -> sysco: log("Ending packages scan")
end
sysco--
sysco--

== Sync ==

sysco -> sysco ++: sync()
sysco -> sysco ++: syncPackages()
    alt packages enabled
        sysco -> dbsync : handle()
        sysco <-- dbsync : handle
        sysco -> rsync++ : startSync(handle, PACKAGES_START_CONFIG_STATEMENT)
            rsync -> dbsync : selectRows()
            dbsync --> rsync : rows
            rsync -> rsync : buildSyncMessage(rows)
            rsync -> sysco : notifySync()
            sysco -> queue : sendSync()
            sysco <-- queue
            sysco --> rsync
            rsync --> sysco
        rsync--
        alt hotfixes
            sysco -> dbsync : handle()
            sysco <-- dbsync : handle
            sysco -> rsync++ : startSync(handle, HOTFIXES_START_CONFIG_STATEMENT)
                rsync -> dbsync : selectRows()
                dbsync --> rsync : rows
                rsync -> rsync : buildSyncMessage(rows)
                rsync -> sysco : notifySync()
                sysco -> queue : sendSync()
                sysco <-- queue
                sysco --> rsync
                rsync --> sysco
        end
    end
sysco--
sysco--


@enduml