' Copyright (C) 2015-2021, Wazuh Inc.
' Created by Wazuh, Inc. <info@wazuh.com>.
' This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

@startuml syscollector
actor "wmodules-thread" as wmodules
actor "receiver-thread" as recv
actor "send-queue" as queue
participant syscollector as sysco
participant dbsync
participant rsync
participant normalizer

wmodules -> sysco ++ : instance()
wmodules -> sysco : init()
sysco -> dbsync : create()
activate dbsync
sysco -> rsync : create()
activate rsync
sysco -> normalizer : create()
activate normalizer
sysco -> sysco : registerWithRsync()
activate sysco
sysco -> rsync : registerSyncID()
deactivate sysco
note right
will register each enabled scan 
end note

sysco -> sysco : syncLoop()
activate sysco
alt scan_on_start
    sysco -> sysco : scan() ...
    sysco -> sysco : sync() ...
end
loop !stopping
activate sysco
    sysco -> sysco : scan()
    activate sysco
        sysco -> dbsync : syncRows()
        activate dbsync
            dbsync -> sysco : notifyDiff()
            activate sysco
                sysco ->x queue : sendDiff()
                sysco <--x queue
                sysco --> dbsync
            deactivate sysco
            sysco <-- dbsync
        deactivate dbsync
    deactivate sysco
    sysco -> sysco : sync()
    activate sysco
        sysco -> rsync : startSync()
        activate rsync
            rsync -> dbsync : selectRows()
            dbsync --> rsync
            rsync -> rsync : calcChecksum()
            note right
            rsync will build the sync message with:
            - first element
            - last element
            - the checksum of the checksum of each row
            end note
            rsync -> sysco : notifySync()
            activate sysco
                sysco -> queue : sendSync()
                sysco <-- queue
                sysco --> rsync
            deactivate sysco
            rsync --> sysco
        deactivate rsync
    deactivate sysco
    sysco -> sysco : sleep(intervalValue)
end
sysco -> rsync : destroy()
sysco -> dbsync : destroy()
deactivate sysco

... ...
recv -> sysco : push_message(string)
alt !stopping
    sysco -> rsync : pushMessage(vector)
    note right
        std::string is copied into a
        std::vector<uint8_t> to be passed to rsync.
    end note
    activate rsync
        rsync -> dbsync : selectRows()
        dbsync --> rsync
        rsync -> rsync : buildSyncMessage()
        rsync -> sysco : notifySync()
        activate sysco
            sysco -> queue : sendSync()
            sysco <-- queue
            sysco --> rsync
        deactivate sysco
        rsync --> sysco
    deactivate rsync
end

... ...
wmodules -> sysco : destroy()
note right
set stoppping = true
end note
wmodules <-- sysco

@enduml