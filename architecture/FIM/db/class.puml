@startuml db_class
package "FIMDB" <<Folder>> #DDDDDD{
    enum "dbresult" {
        DB_SUCCESS
        DB_ERROR
    }
    package "item" <<Folder>> {
        abstract DBItem {
            # string m_identifier
            # bool m_scanned
            # time_t m_lastEvent
            # string m_checksum
            # enum m_mode

            + DBItem()
            + ~DBItem()
            + {abstract} fim_entry toFimEntry()
            + {abstract} nlohman::json toJson()
            + bool state()
        }

        class FileItem {
            - unsigned int m_size
            - string m_perm
            - string m_attributes
            - int m_uid
            - string m_username
            - int m_gid
            - string m_groupname
            - time_t m_time
            - unsigned long int m_inode
            - string m_md5
            - string m_sha1
            - string m_sha256
            - unsigned long int m_dev
            - int m_options
            - unique_ptr<fim_entry> m_fimEntry
            - unique_ptr<nlohman::json> m_statementConf

            + FileItem(args)
            + FileItem(fim_entry)
            + FileItem(nlohman::json)
            + ~FileItem()
            + fim_entry* toFIMEntry()
            + nlohman::json* toJsonEntry()
        }
        class "RegistryValue" {
            - int m_type
            - int m_keyUid
            - int m_registryKey
            - int m_size
            - string m_md5
            - string m_sha1
            - string m_sha256
            - unique_ptr<fim_entry> m_fimEntry
            - unique_ptr<nlohman::json> m_statementConf

            + RegistryValue(args)
            + RegistryValue(fim_entry)
            + RegistryValue(nlohman::json)
            + ~RegistryValue()
            + fim_entry toFIMEntry()
            + json toJson()
        }
        class "RegistryKey" {
            - string m_perm
            - string m_path
            - int m_uid
            - string m_username
            - int m_gid
            - string m_groupname
            - time_t m_time
            - int m_arch
            - unique_ptr<fim_entry> m_fimEntry
            - unique_ptr<nlohman::json> m_statementConf

            + RegistryKey(args)
            + RegistryKey(fim_entry)
            + RegistryKey(nlohman::json)
            + ~RegistryKey()
            + fim_entry toFIMEntry()
            + json to_Json()
        }
    }
    class "FimDB"  <<(S,#FF7700) Singleton>> {
        - int m_max_rows_file
        - int m_max_rows_registry
        - int m_interval_synchronization
        - bool m_stopping
        - mutex m_fimSyncMutex
        - condition_variable m_cv
        - DBSync m_dbsyncHandler
        - Rsync m_rsyncHandler
        - callback m_syncFileMessageFunction
        - callback m_syncRegistryMessageFunction
        - callback m_loggingFunction

        - FIMDB()
        - ~FIMDB()
        - FIMDB(const FIMDB&)
        - void setFileLimit()
        - void setRegistryLimit()
        - void setValueLimit()
        - void sync()

        + void init()
        + void registerRsync()
        + void fimSyncPushMsg(data)
        + void fimRunIntegrity()
        + void stopSync()
        + void loopRsync(lock)
        + void insertItem(json)
        + void removeItem(json)
        + void updateItem(json, callback)
        + void executeQuery(json, callback)
        + FimDB getInstance()
    }
    interface FIMDBHelper {
        void getDBItem(const json &, const json &)
        int getCount(const string &)
        void initDB(const string&, int, int, void(*)(const char *, const char *), void(*)(modules_log_level_t level))
        bool updateItem(const string &, const json &)
        void removeFromDB(const string &, const json &)
        nlohmann::json dbQuery(const std::string& , const nlohmann::json&, const std::string&, const std::string&)
    }
    namespace db{
    interface file {
        int fim_db_file_pattern_search(const char*, callback_context_t )
        int fim_db_get_path(const char*, callback_context_t)
        int fim_db_remove_path(const char*)
        int fim_db_get_count_file_inode()
        int fim_db_get_count_file_entry()
        int fim_db_file_update(const fim_entry*, bool*)
        void fim_db_file_inode_search(const unsigned long, const unsigned long, callback_context_t)
    }
    interface FimDBUtils {
        static std::vector<std::string> getPathsFromINode(const unsigned long inode, const unsigned long dev)
        static std::vector<std::string> getPathsFromPattern(const std::string& pattern)
    }
    interface registry {
        int fim_db_get_registry_key_rowid(const char *, unsigned int, unsigned int *)
        fim_registry_value_data* fim_db_get_registry_data(unsigned int, const char *)
        int fim_db_insert_registry_key(fim_registry_key *, unsigned int)
        int fim_db_set_all_registry_key_unscanned()
        int fim_db_set_all_registry_data_unscanned()
        int fim_db_set_registry_key_scanned(const char *, unsigned int)
        int fim_db_set_registry_data_scanned(const char *, unsigned int)
        int fim_db_get_count_registry_data()
        int fim_db_get_count_registry_key()
        int fim_db_remove_registry_key(fim_entry *)
        int fim_db_remove_registry_value_data(fim_registry_value_data *)
        fim_registry_key* fim_db_get_registry_key_using_id(unsigned int)
    }
    file o-- FimDBUtils
    }
}
circle FIM

DBItem <|-- FileItem
DBItem <|-- RegistryValue
DBItem <|-- RegistryKey
FIMDBHelper --o FimDB
item --o db
FIMDBHelper --o db
FimDB -- dbresult
FIM => FIMDB
@enduml
