run-name: Packages - Build Wazuh agent Linux amd - ${{ inputs.legacy && 'legacy' || 'agent' }} packages - ${{ inputs.system }} - ${{ inputs.architecture }}${{ inputs.is_stage && ' - is stage' || '' }}${{ inputs.checksum && ' - checksum' || '' }}${{ inputs.debug && ' - debug' || '' }} ${{ inputs.id }}
name: Build Wazuh agent linux amd

on:
  pull_request:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: |
          Specify the docker tag used to build the package.
          Use 'developer' to set branch name as tag.
          Use 'auto' to set branch version as tag.
          Default is 'auto'.
        required: false
        default: 'auto'
      architecture:
        type: choice
        description: Package architecture [i386, x86_64, amd64].
        required: true
        options:
          - i386
          - x86_64
          - amd64
      system:
        type: choice
        description: Package OS [deb, rpm].
        required: true
        options:
          - deb
          - rpm
      revision:
        description: |
          Package revision (name and metadata).
          Default is '0'.
        required: false
        default: '0'
      is_stage:
        type: boolean
        description: |
          Set production nomenclature if true.
          Default is 'false'.
        required: false
      legacy:
        type: boolean
        description: |
          Set the use of rpm5 resources.
          Default is 'false'.
        required: false
      debug:
        type: boolean
        description: |
          Build the binaries as debug (without optimizations).
          Default is 'false'.
        required: false
      checksum:
        type: boolean
        description: |
          Generate package checksum.
          Default is 'false'.
        required: false
      source_reference:
        description: |
          Branch from wazuh/wazuh repository to use.
        required: true
      id:
        type: string
        description: |
          ID used to identify the workflow uniquely.
        required: false

  workflow_call:
    inputs:
      docker_image_tag:
        type: string
        required: false
        default: 'auto'
      architecture:
        type: string
        required: true
      system:
        type: string
        required: true
      revision:
        type: string
        required: false
      is_stage:
        type: boolean
        required: false
      legacy:
        type: boolean
        required: false
      debug:
        type: boolean
        required: false
      checksum:
        type: boolean
        required: false
      source_reference:
        type: string
        required: true
      id:
        type: string
        required: false

jobs:
  Build-agent-linux-packages:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: Build ${{ inputs.system }} wazuh-agent on ${{ inputs.architecture }} ${{ inputs.legacy && '- legacy' || '' }} ${{ inputs.is_stage && '- is stage' || '' }}

    steps:
      - name: Checkout wazuh/wazuh-agent repository
        uses: actions/checkout@v4
        with:
          repository: wazuh/wazuh-agent
          ref: ${{ inputs.source_reference }}

      - name: Set ARCH
        run: |
          if [ ${{ inputs.architecture }} = 'x86_64' ]; then
            arch="amd64"
          else
            arch=${{ inputs.architecture }}
          fi
          echo "ARCH=$arch" >> $GITHUB_ENV;

      - name: Set TAG and CONTAINER_NAME
        run: |
          VERSION=$(sed 's/.*\([0-9]\.[0-9]*\.[0-9]*\).*/\1/' ./src/VERSION)
          if [ "${{ inputs.docker_image_tag }}" == "auto" ]; then
            echo "TAG=$VERSION" >> $GITHUB_ENV;
          elif [ "${{ inputs.docker_image_tag }}" == "developer" ]; then
            echo "TAG=$(sed 's|[/\]|--|g' <<< ${{ inputs.source_reference }})" >> $GITHUB_ENV;
          else
            echo "TAG=${{ inputs.docker_image_tag }}" >> $GITHUB_ENV;
          fi
          if [ "${{ inputs.legacy }}" == "true" ]; then
            echo "CONTAINER_NAME=pkg_${{ inputs.system }}_legacy_builder_${{ env.ARCH }}" >> $GITHUB_ENV
          else
            echo "CONTAINER_NAME=pkg_${{ inputs.system }}_agent_builder_${{ env.ARCH }}" >> $GITHUB_ENV
          fi

      - name: Download docker image for package building
        run: |
          bash .github/actions/ghcr_pull_and_push/pull_image_from_ghcr.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.actor}} ${{ env.CONTAINER_NAME }} ${{ env.TAG }}

      - name: Build ${{ inputs.system }} wazuh-agent on ${{ env.ARCH }}
        run: |
          REVISION=${{ inputs.revision }}
          FLAGS="--verbose -t agent -s /tmp --dont-build-docker -j $(nproc) "
          if [ -z "$REVISION" ]; then FLAGS+="-r 0 "; else FLAGS+="-r $REVISION "; fi
          if [ "${{ inputs.is_stage }}" == "true" ]; then FLAGS+="--is_stage "; fi
          if [ "${{ inputs.legacy }}" == "true" ]; then FLAGS+="--legacy "; fi
          if [ "${{ inputs.checksum }}" == "true" ]; then FLAGS+="--checksum "; fi
          if [ "${{ inputs.debug }}" == "true" ]; then FLAGS+="--debug "; fi
          echo "generate_package.sh -a ${{ env.ARCH }} --tag ${{ env.TAG }} --system ${{ inputs.system }} $FLAGS"
          bash packages/generate_package.sh -a ${{ env.ARCH }} --tag ${{ env.TAG }} --system ${{ inputs.system }} $FLAGS

          if [ "${{ inputs.system}}" == "deb" ]; then
            SYMBOLS_TAG="dbg"
          else
            SYMBOLS_TAG="debuginfo"
          fi

          echo "PACKAGE_NAME=$(find /tmp -maxdepth 1 -type f -name *agent*.${{ inputs.system }} -exec basename {} 2>/dev/null \;| grep -v -E "^(wazuh-agent-dbg|wazuh-agent-debuginfo)")" | tee -a $GITHUB_ENV
          echo "PACKAGE_SYMBOLS_NAME=$(find /tmp -maxdepth 1 -type f -name *agent*.${{ inputs.system }} -exec basename {} 2>/dev/null \;| grep -E "^(wazuh-agent-dbg|wazuh-agent-debuginfo)")" | tee -a $GITHUB_ENV

      - name: Test install built package
        run: |
          if [ -z "${{ env.PACKAGE_NAME }}" ]; then
            echo "No package found matching the pattern!";
            exit 1;
          fi
          sudo docker run -v $GITHUB_WORKSPACE/.github/actions/test-install-components/:/tests -v /tmp/:/packages --entrypoint '/tests/install_component.sh' ${{ env.CONTAINER_NAME }}:${{ env.TAG }} ${{ env.PACKAGE_NAME }} agent
          # Check if wazuh-agent was installed. The /tmp/status.log file was generated in the previous step.
          if grep -iq " installed.*wazuh-agent" /tmp/status.log ; then
            echo "Installation successfully."
          else
            echo "The installation could not be completed. The package will not be uploaded.";
            exit 1;
          fi

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: ${{ secrets.CI_AWS_REGION }}

      - name: Upload package to S3
        run: |
          s3_package_uri="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages"; echo "S3_PACKAGE_URI=$s3_package_uri" | tee -a $GITHUB_ENV
          aws s3 cp /tmp/${{ env.PACKAGE_NAME }} $s3_package_uri/
          s3uri="$s3_package_uri/${{ env.PACKAGE_NAME }}"
          echo "S3 URI: ${s3uri}"

      # - name: Upload debug symbols to S3
      #   run: |
      #     # If is legacy, the symbols are not generated
      #     if [ "${{ inputs.legacy }}" == "true" ]; then
      #       echo "The symbols are not generated for legacy packages.";
      #     else
      #       aws s3 cp /tmp/${{ env.PACKAGE_SYMBOLS_NAME }} s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/
      #       symbols="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/${{ env.PACKAGE_SYMBOLS_NAME }}"
      #       echo "S3 symbols URI: ${symbols}"
      #     fi

      - name: Upload checksums to S3
        if: ${{ inputs.checksum }}
        run: |
          aws s3 cp /tmp/${{ env.PACKAGE_NAME }}.sha512 s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/
          s3uri="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/${{ env.PACKAGE_NAME }}.sha512"
          echo "S3 sha512 URI: ${s3uri}"

          if [ "${{ inputs.legacy }}" == "true" ]; then
            echo "The symbols are not generated for legacy packages.";
          else
            aws s3 cp /tmp/${{ env.PACKAGE_SYMBOLS_NAME }}.sha512 s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/
            s3uri="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/${{ env.PACKAGE_SYMBOLS_NAME }}.sha512"
            echo "S3 sha512 symbols URI: ${s3uri}"
          fi
