'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector detects invalid values for the
       'frequency' tag and the Wazuh API returns the same values for the configured 'localfile' section.
       Log data collection is the real-time process of making sense out of the records generated by
       servers or devices. This component can receive logs through text files or Windows event logs.
       It can also directly receive logs via remote syslog which is useful for firewalls and
       other such devices.

components:
    - logcollector

suite: configuration

targets:
    - agent
    - manager

daemons:
    - wazuh-logcollector
    - wazuh-apid

os_platform:
    - linux
    - windows

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html#frequency

tags:
    - logcollector_configuration
'''
import pytest
import sys

import subprocess as sb

from pathlib import Path
from time import sleep

from wazuh_testing.constants.paths.logs import WAZUH_LOG_PATH
from wazuh_testing.constants.paths.configurations import WAZUH_CONF_PATH
from wazuh_testing.constants.platforms import WINDOWS
from wazuh_testing.constants.daemons import LOGCOLLECTOR_DAEMON
from wazuh_testing.modules.logcollector import configuration as logcollector_configuration
from wazuh_testing.modules.logcollector import patterns, utils, PREFIX
from wazuh_testing.tools.monitors import file_monitor
from wazuh_testing.utils import callbacks, configuration
from wazuh_testing.utils.services import control_service
from wazuh_testing.utils.file import truncate_file

from . import TEST_CASES_PATH, CONFIGURATIONS_PATH


# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
local_internal_options = {logcollector_configuration.LOGCOLLECTOR_DEBUG: '2', logcollector_configuration.LOGCOLLECTOR_REMOTE_COMMANDS: '1'}

if sys.platform == WINDOWS:
    command = 'tasklist'
    no_restart_windows_after_configuration_set = True
else:
    command = 'ps -aux'

problematic_values = ['3s', '3s5m', '3Testing']

# Test metadata, configuration and ids.
cases_path = Path(TEST_CASES_PATH, 'cases_basic_configuration_frequency.yaml')
config_path = Path(CONFIGURATIONS_PATH, 'wazuh_basic_configuration_frequency.yaml')
test_configuration, test_metadata, test_cases_ids = configuration.get_test_cases_data(cases_path)

for test in test_metadata:
    if test['command']:
        test['command'] = command
for test in test_configuration:
    if test['COMMAND']:
        test['COMMAND'] = command

test_configuration = configuration.load_configuration_template(config_path, test_configuration, test_metadata)

# Test daemons to restart.
daemons_handler_configuration = {'all_daemons': True}

def check_configuration_frequency_valid(test_configuration, test_metadata):
    """Check if the Wazuh module runs correctly and that analyze the desired file.

    Ensure logcollector is running with the specified configuration, analyzing the designated file and,
    in the case of the Wazuh server, check if the API answer for localfile configuration block coincides
    the selected configuration.

    Args:
        cfg (dict): Dictionary with the localfile configuration.

    Raises:
        TimeoutError: If the "Analyzing file" callback is not generated.
        AssertError: In the case of a server instance, the API response is different than the real configuration.
    """

    pattern = None
    if test_metadata['log_format'] == 'full_command':
        pattern = patterns.LOGCOLLECTOR_MONITORING_FULL_COMMAND
    else:
        pattern = patterns.LOGCOLLECTOR_MONITORING_COMMAND

    wazuh_log_monitor = file_monitor.FileMonitor(WAZUH_LOG_PATH)

    wazuh_log_monitor.start(callback=callbacks.generate_callback(pattern, {'command': test_metadata['command']}))
    assert (wazuh_log_monitor.callback_result != None), patterns.ERROR_COMMAND_MONITORING


    if sys.platform != WINDOWS:
        # Wait until the logcollector socket is available.
        sleep(10)
        utils.validate_test_config_with_module_config(test_configuration=test_configuration)

def check_configuration_frequency_invalid(test_configuration, test_metadata):
    """Check if the Wazuh fails because an invalid frequency configuration value.

    Args:
        cfg (dict): Dictionary with the localfile configuration.

    Raises:
        TimeoutError: If error callbacks are not generated.
    """

    wazuh_log_monitor = file_monitor.FileMonitor(WAZUH_LOG_PATH)
    log_callback = callbacks.generate_callback(patterns.LOGCOLLECTOR_INVALID_VALUE_ELEMENT,
                                                {'prefix' : PREFIX,
                                                'option': 'frequency',
                                                'value' : test_metadata['frequency']})
    wazuh_log_monitor.start(timeout=5, callback=log_callback)
    assert (wazuh_log_monitor.callback_result != None), patterns.ERROR_GENERIC_MESSAGE

    log_callback = callbacks.generate_callback(patterns.LOGCOLLECTOR_CONFIGURATION_ERROR,
                                                {'prefix' : PREFIX,
                                                 'severity' : 'ERROR',
                                                'conf_path' : WAZUH_CONF_PATH})
    wazuh_log_monitor.start(timeout=5, callback=log_callback)
    assert (wazuh_log_monitor.callback_result != None), patterns.ERROR_GENERIC_MESSAGE

    if sys.platform != WINDOWS:

        log_callback = callbacks.generate_callback(patterns.LOGCOLLECTOR_CONFIGURATION_ERROR,
                                                {'prefix' : PREFIX,
                                                 'severity' : 'CRITICAL',
                                                'conf_path' : WAZUH_CONF_PATH})
        wazuh_log_monitor.start(timeout=5, callback=log_callback)
        assert (wazuh_log_monitor.callback_result != None), patterns.ERROR_GENERIC_MESSAGE

@pytest.mark.parametrize('test_configuration, test_metadata', zip(test_configuration, test_metadata), ids=test_cases_ids)
def test_configuration_frequency(test_configuration, test_metadata, set_wazuh_configuration, daemons_handler_module):
    '''
    description: Check if the 'wazuh-logcollector' daemon detects invalid configurations for the 'frequency' tag.
                 For this purpose, the test will set a 'localfile' section using valid/invalid values for that
                 tag. Then, it will check if the 'monitoring' event is triggered when using a valid value, or
                 if an error event is generated when using an invalid one. Finally, the test will verify that
                 the Wazuh API returns the same values for the 'localfile' section that the configured one.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - get_local_internal_options:
            type: fixture
            brief: Get local internal options from the module.
        - configure_local_internal_options:
            type: fixture
            brief: Configure the Wazuh local internal options.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.

    assertions:
        - Verify that the logcollector generates error events when using invalid values for the 'frequency' tag.
        - Verify that the logcollector generates 'monitoring' events when using valid values for the 'frequency' tag.
        - Verify that the Wazuh API returns the same values for the 'localfile' section as the configured one.

    input_description: A configuration template (test_basic_configuration_frequency) is contained in an external
                       YAML file (wazuh_basic_configuration.yaml). That template is combined with different
                       test cases defined in the module. Those include configuration settings for
                       the 'wazuh-logcollector' daemon.

    expected_output:
        - r'INFO: Monitoring .* of command.*'
        - r'Invalid value for element .*'
        - r'Configuration error at .*'

    tags:
        - invalid_settings
    '''
    control_service('stop', daemon=LOGCOLLECTOR_DAEMON)
    truncate_file(WAZUH_LOG_PATH)

    if test_metadata['valid_value']:
        control_service('start', daemon=LOGCOLLECTOR_DAEMON)
        check_configuration_frequency_valid(test_configuration, test_metadata)
    else:
        if test_metadata['frequency'] in problematic_values:
            pytest.xfail("Logcolector accepts invalid values. Issue: https://github.com/wazuh/wazuh/issues/8158")
        else:
            if sys.platform == WINDOWS:
                pytest.xfail("Windows agent allows invalid localfile configuration:\
                              https://github.com/wazuh/wazuh/issues/10890")
                expected_exception = ValueError
            else:
                expected_exception = sb.CalledProcessError

            with pytest.raises(expected_exception):
                control_service('start', daemon=LOGCOLLECTOR_DAEMON)
                check_configuration_frequency_invalid(test_configuration)
